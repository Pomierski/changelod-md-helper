{"mappings":"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","sources":["index.ts","src/cli/cliMessages.ts","src/cli/options.ts","src/config.ts","src/constants.ts","src/default-config.json","src/core/getReleaseVersion.ts","src/utils/getComparsionForTemplate.ts","src/utils/parseTextToRegex.ts","src/utils/getIsDateBeforeVersion.ts","src/types/configPlaceholder.ts","src/utils/utils.ts","src/core/getRequiredChangelogChunks.ts","src/core/promptAddVNext.ts","src/core/writeToChangelog.ts","src/core/sortChangelog.ts","src/getNewChangelogContent.ts","src/core/getReleaseHeader.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { readFile } from \"fs\";\nimport { displayFormattedError } from \"./src/cli/cliMessages\";\nimport { CLIOptions, options } from \"./src/cli/options\";\nimport config from \"./src/config\";\nimport { getReleaseVersion } from \"./src/core/getReleaseVersion\";\nimport { getRequiredChangelogChunks } from \"./src/core/getRequiredChangelogChunks\";\nimport { writeToChangelog } from \"./src/core/writeToChangelog\";\nimport { getNewChangelogContent } from \"./src/getNewChangelogContent\";\n\nreadFile(config.changelogPath, \"utf8\", async (err, data) => {\n  if (err) {\n    displayFormattedError(\n      `Couldn't find or read ${config.changelogPath}. Check your config`\n    );\n    console.error(err);\n    process.exit(1);\n  }\n\n  const requiredChangelogChunks = await getRequiredChangelogChunks(data);\n  const releaseVersion = getReleaseVersion(requiredChangelogChunks);\n\n  if (options[CLIOptions.SortOnly]) {\n    await writeToChangelog(requiredChangelogChunks.fullLog);\n  }\n\n  await writeToChangelog(\n    getNewChangelogContent(requiredChangelogChunks.fullLog, releaseVersion)\n  );\n});\n","import { blueBright, greenBright, redBright, yellow } from \"colorette\";\r\n\r\nconst addNewLine = (...message: string[]) => [message.join(\" \"), \"\\n\"].join(\"\");\r\n\r\nexport const displayFormattedError = (message: string) => {\r\n  return console.log(addNewLine(\"❌\", redBright(message)));\r\n};\r\n\r\nexport const displaySuccessMessage = (message: string) => {\r\n  return console.log(addNewLine(\"✅\", greenBright(message)));\r\n};\r\n\r\nexport const displayWarningMessage = (message: string) => {\r\n  return console.log(addNewLine(\"⚠️ \", yellow(message)));\r\n};\r\n\r\nexport const displayInfoMessage = (message: string) => {\r\n  return console.log(addNewLine(\"➡️ \", blueBright(message)));\r\n};\r\n","import { program } from \"commander\";\r\n\r\nexport enum CLIOptions {\r\n  SortOnly = \"sortOnly\",\r\n}\r\n\r\nprogram.option(\"-so, --sort-only\");\r\n\r\nprogram.parse();\r\n\r\nexport const options = program.opts();\r\n","import { readFileSync } from \"fs\";\r\nimport { displayWarningMessage } from \"./cli/cliMessages\";\r\nimport { USER_CONFIG_FILE_PATH } from \"./constants\";\r\nimport defaultConfig from \"./default-config.json\";\r\n\r\nexport type Config = {\r\n  vNextTemplate: string;\r\n  releaseTemplate: string;\r\n  majorTemplate: string;\r\n  minorTemplate: string;\r\n  patchTemplate: string;\r\n  useRegexInTemplates: boolean;\r\n  parseTemplatesToRegex: boolean;\r\n  dateFormat: string;\r\n  bumpMinorByMajor: boolean;\r\n  bumpMinorByPatch: boolean;\r\n  sortChangelog: boolean;\r\n  changelogPath: string;\r\n  displayExampleCommit: boolean;\r\n};\r\n\r\nconst getConfig = (): Config => {\r\n  let config = defaultConfig;\r\n  try {\r\n    const userConfig = JSON.parse(readFileSync(USER_CONFIG_FILE_PATH, \"utf-8\"));\r\n    config = { ...config, ...userConfig };\r\n  } catch (e) {\r\n    displayWarningMessage(\r\n      \"Couldn't read user config, using default config instead...\"\r\n    );\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nexport default getConfig();\r\n","export const GENERIC_VERSION = \"1.0.0\";\r\nexport const GENERIC_DATE = \"1111-11-11\";\r\nexport const DEFAULT_DATE_FORMAT = \"yyyy-mm-dd\";\r\nexport const USER_CONFIG_FILE_PATH = \"./rh-config.json\";\r\n","{\r\n  \"vNextTemplate\": \"[vNext]\",\r\n  \"releaseTemplate\": \"v$version_placeholder $date_placeholder\",\r\n  \"majorTemplate\": \"[MAJOR]\",\r\n  \"minorTemplate\": \"[MINOR]\",\r\n  \"patchTemplate\": \"[PATCH]\",\r\n  \"useRegexInTemplates\": false,\r\n  \"parseTemplatesToRegex\": false,\r\n  \"dateFormat\": \"YYYY-MM-DD\",\r\n  \"bumpMinorByMajor\": false,\r\n  \"bumpMinorByPatch\": false,\r\n  \"sortChangelog\": true,\r\n  \"changelogPath\": \"./changelog.md\",\r\n  \"displayExampleCommit\": true\r\n}\r\n","import { displayFormattedError } from \"../cli/cliMessages\";\nimport config from \"../config\";\nimport { getComparsionForTemplate } from \"../utils/getComparsionForTemplate\";\nimport { getIsDateBeforeVersion } from \"../utils/getIsDateBeforeVersion\";\nimport { versionRegexGlobal } from \"../utils/utils\";\nimport { ChangelogChunks } from \"./getRequiredChangelogChunks\";\n\nexport interface Version {\n  major: number;\n  minor: number;\n  patch: number;\n}\n\nconst getUpdatedVersion = (version: Version, bump: keyof Version): string => {\n  const nextVersion = { ...version };\n\n  if (config.bumpMinorByMajor && bump === \"major\") {\n    bump = \"minor\";\n  } else if (config.bumpMinorByPatch && bump === \"patch\") {\n    bump = \"minor\";\n  }\n\n  nextVersion[bump] += 1;\n\n  if (bump === \"major\") {\n    nextVersion[\"minor\"] = 0;\n  }\n\n  if (bump === \"major\" || bump === \"minor\") {\n    nextVersion[\"patch\"] = 0;\n  }\n\n  return Object.values(nextVersion).join(\".\");\n};\n\nexport const getReleaseVersion = (changelogChunks: ChangelogChunks): string => {\n  const dateFormatIncludesDots = config.dateFormat.includes(\".\");\n  const correctVersionIndex =\n    dateFormatIncludesDots && getIsDateBeforeVersion() ? 1 : 0;\n\n  let latestReleaseVersion: RegExpMatchArray;\n\n  try {\n    const matchedVersion = [\n      ...changelogChunks.latestReleaseHeader.matchAll(versionRegexGlobal),\n    ];\n\n    if (matchedVersion.length === 1 && dateFormatIncludesDots) {\n      displayFormattedError(\n        \"Couldn't find version in latest release entry. Check your config\"\n      );\n      process.exit();\n    }\n\n    latestReleaseVersion = matchedVersion[correctVersionIndex];\n  } catch (error) {\n    displayFormattedError(\n      \"Couldn't find version in latest release entry. Check your config\"\n    );\n    process.exit();\n  }\n\n  const [latestReleaseMajor, latestReleaseMinor, latestReleasePatch] =\n    latestReleaseVersion[0].split(\".\");\n\n  const lastVersion = {\n    major: parseInt(latestReleaseMajor),\n    minor: parseInt(latestReleaseMinor),\n    patch: parseInt(latestReleasePatch),\n  };\n\n  const majorFound = changelogChunks.vNext.find((line) =>\n    getComparsionForTemplate(config.majorTemplate, line)\n  );\n\n  if (majorFound) {\n    return getUpdatedVersion(lastVersion, \"major\");\n  }\n\n  const minorFound = changelogChunks.vNext.find((line) =>\n    getComparsionForTemplate(config.minorTemplate, line)\n  );\n\n  if (minorFound) {\n    return getUpdatedVersion(lastVersion, \"minor\");\n  }\n\n  const patchFound = changelogChunks.vNext.find((line) =>\n    getComparsionForTemplate(config.patchTemplate, line)\n  );\n\n  if (patchFound) {\n    return getUpdatedVersion(lastVersion, \"patch\");\n  }\n\n  displayFormattedError(\n    \"Couldn't find any changelog entry that fits into MAJOR/MINOR/PATCH criteria.\"\n  );\n\n  process.exit();\n};\n","import config from \"../config\";\nimport { parseTextToRegex } from \"./parseTextToRegex\";\n\nexport const getComparsionForTemplate = (\n  template: string,\n  compare: string\n): boolean => {\n  if (config.useRegexInTemplates) {\n    return Boolean(compare.match(new RegExp(template)));\n  }\n\n  if (config.parseTemplatesToRegex) {\n    return Boolean(compare.match(parseTextToRegex(template)));\n  }\n\n  return compare.includes(template);\n};\n","export const parseTextToRegex = (text: string): RegExp => {\n  const cleanedText = text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n  const textWithNumbers = cleanedText.replace(/\\d+/g, \"\\\\d+\");\n\n  return new RegExp(textWithNumbers);\n};\n","import config from \"../config\";\nimport { ConfigPlaceholder } from \"../types/configPlaceholder\";\n\nexport const getIsDateBeforeVersion = (): boolean => {\n  const releaseTemplate = config.releaseTemplate.split(\" \");\n\n  const dateIndex = releaseTemplate.findIndex((line) =>\n    line.includes(ConfigPlaceholder.date)\n  );\n\n  if (dateIndex === -1) {\n    return false;\n  }\n\n  const versionIndex = releaseTemplate.findIndex((line) =>\n    line.includes(ConfigPlaceholder.version)\n  );\n\n  return dateIndex < versionIndex;\n};\n","export enum ConfigPlaceholder {\r\n  version = \"$version_placeholder\",\r\n  date = \"$date_placeholder\",\r\n}\r\n","export const versionRegexGlobal = /\\d+\\.\\d+\\.\\d+/g;\n","import config from \"../config\";\nimport { GENERIC_VERSION } from \"../constants\";\nimport { ConfigPlaceholder } from \"../types/configPlaceholder\";\nimport { getComparsionForTemplate } from \"../utils/getComparsionForTemplate\";\nimport { parseTextToRegex } from \"../utils/parseTextToRegex\";\nimport { promptAddVNext } from \"./promptAddVNext\";\nimport { sortChangelog } from \"./sortChangelog\";\n\nexport interface ChangelogChunks {\n  vNext: string[];\n  latestReleaseHeader: string;\n  fullLog: string;\n}\n\nexport const getRequiredChangelogChunks = async (\n  changelogData: string\n): Promise<ChangelogChunks> => {\n  const lines = changelogData.split(\"\\n\");\n\n  const vNextIndex = lines.findIndex((line) =>\n    getComparsionForTemplate(config.vNextTemplate, line)\n  );\n\n  if (vNextIndex === -1) {\n    await promptAddVNext(changelogData);\n  }\n\n  const latestReleaseTemplate = config.releaseTemplate\n    .replace(ConfigPlaceholder.version, GENERIC_VERSION)\n    .replace(\n      ConfigPlaceholder.date,\n      config.dateFormat.replace(/[A-Za-z0-9]/g, \"1\")\n    );\n\n  const latestReleaseIndex = lines.findIndex((line) =>\n    line.match(parseTextToRegex(latestReleaseTemplate))\n  );\n\n  const vNextChunk = lines.slice(vNextIndex, latestReleaseIndex);\n  const vNext = config.sortChangelog ? sortChangelog(vNextChunk) : vNextChunk;\n\n  return {\n    vNext,\n    latestReleaseHeader: lines[latestReleaseIndex],\n    fullLog: config.sortChangelog\n      ? [...vNext, ...lines.slice(latestReleaseIndex)].join(\"\\n\")\n      : changelogData,\n  };\n};\n","import process from \"process\";\r\nimport prompts from \"prompts\";\r\nimport config from \"../config\";\r\nimport { writeToChangelog } from \"./writeToChangelog\";\r\n\r\nenum Choices {\r\n  Yes = \"Yes\",\r\n  No = \"No\",\r\n}\r\n\r\nexport const promptAddVNext = async (data: string): Promise<void> => {\r\n  const response = await prompts({\r\n    type: \"select\",\r\n    name: \"value\",\r\n    message:\r\n      \"Couldn't find vNext entry to replace it with proper version. Would you like to add vNext entry instead?\",\r\n    choices: [\r\n      { title: Choices.Yes, value: Choices.Yes },\r\n      { title: Choices.No, value: Choices.No },\r\n    ],\r\n  });\r\n\r\n  if (response.value === Choices.No) {\r\n    process.exit();\r\n  }\r\n\r\n  const changelogWithVNextAdded = [config.vNextTemplate, data].join(\"\\n\");\r\n\r\n  await writeToChangelog(changelogWithVNextAdded);\r\n};\r\n","import { writeFile } from \"fs\";\r\nimport {\r\n  displayFormattedError,\r\n  displaySuccessMessage,\r\n} from \"../cli/cliMessages\";\r\nimport config from \"../config\";\r\n\r\nexport const writeToChangelog = async (content: string): Promise<never> => {\r\n  return new Promise((resolve, reject) => {\r\n    writeFile(config.changelogPath, content, (err: Error) => {\r\n      if (err) {\r\n        displayFormattedError(\r\n          `Couldn't write changelog to ${config.changelogPath}. Check your config or anylize this error message`\r\n        );\r\n        console.error(err);\r\n        reject(process.exit());\r\n      }\r\n      displaySuccessMessage(\r\n        `Successfuly saved changes to ${config.changelogPath}`\r\n      );\r\n\r\n      resolve(process.exit());\r\n    });\r\n  });\r\n};\r\n","import config from \"../config\";\nimport { getComparsionForTemplate } from \"../utils/getComparsionForTemplate\";\n\nconst isMajor = (line: string) =>\n  getComparsionForTemplate(config.majorTemplate, line);\nconst isMinor = (line: string) =>\n  getComparsionForTemplate(config.minorTemplate, line);\nconst isPatch = (line: string) =>\n  getComparsionForTemplate(config.patchTemplate, line);\n\nconst isTemplateLine = (line: string) =>\n  isMajor(line) || isMinor(line) || isPatch(line);\n\nconst majorCompareFn = (a: string, b: string) => {\n  if (isMajor(a) && !isMajor(b)) {\n    return -1;\n  }\n  if (!isMajor(a) && isMajor(b)) {\n    return 1;\n  }\n  return 0;\n};\n\nconst minorCompareFn = (a: string, b: string) => {\n  if (isMinor(a) && isPatch(b)) {\n    return -1;\n  }\n  if (isPatch(a) && isMinor(b)) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const sortChangelog = (vNext: string[]): string[] => {\n  const startIndex = vNext.findIndex((line) => isTemplateLine(line));\n  const vNextCopy = [...vNext.slice(startIndex)];\n  const chunks = [];\n\n  while (vNextCopy.length > 0) {\n    const startIndex = vNextCopy.findIndex(isTemplateLine);\n    const endIndex = vNextCopy.findIndex(\n      (line, index) => isTemplateLine(line) && index !== startIndex\n    );\n\n    if (startIndex === -1 || endIndex === -1) {\n      if (vNextCopy.length > 0) {\n        const reverseVNext = [...vNextCopy];\n        reverseVNext.reverse();\n\n        const lastNotNewLineIndex = reverseVNext.findIndex((line) =>\n          line.trim().match(/[^\\n\\r]/)\n        );\n\n        if (lastNotNewLineIndex === -1) {\n          chunks.push(vNextCopy.splice(0, vNextCopy.length));\n          break;\n        }\n\n        chunks.push(\n          vNextCopy.splice(0, vNextCopy.length - lastNotNewLineIndex)\n        );\n      }\n      break;\n    }\n\n    chunks.push(\n      vNextCopy.splice(startIndex, endIndex === -1 ? 1 : endIndex - startIndex)\n    );\n  }\n\n  chunks.sort((a, b) => majorCompareFn(a[0], b[0]));\n  chunks.sort((a, b) => minorCompareFn(a[0], b[0]));\n\n  return [...vNext.slice(0, startIndex), ...chunks.flat(), ...vNextCopy];\n};\n","import config from \"./config\";\nimport { getReleaseHeader } from \"./core/getReleaseHeader\";\nimport { ConfigPlaceholder } from \"./types/configPlaceholder\";\n\nexport const getNewChangelogContent = (data: string, version: string) => {\n  const vNextTemplate = config.useRegexInTemplates\n    ? new RegExp(config.vNextTemplate)\n    : config.vNextTemplate;\n  const isDateInTemplate = config.releaseTemplate.includes(\n    ConfigPlaceholder.date\n  );\n  return data.replace(\n    vNextTemplate,\n    getReleaseHeader(config.releaseTemplate, {\n      version,\n      isDateInTemplate,\n    })\n  );\n};\n","import dayjs from \"dayjs\";\nimport { displayFormattedError, displayInfoMessage } from \"../cli/cliMessages\";\nimport config from \"../config\";\nimport { ConfigPlaceholder } from \"../types/configPlaceholder\";\n\nexport type ReleasePlaceholderConfig = {\n  version?: string;\n  isDateInTemplate?: boolean;\n};\n\nexport const getReleaseHeader = (\n  template: string,\n  headerConfig: ReleasePlaceholderConfig\n): string => {\n  if (!headerConfig.version) {\n    displayFormattedError(`Couldn't find vNext or lastest version.`);\n    process.exit();\n  }\n  const replaceVersion = template.replace(\n    ConfigPlaceholder.version,\n    headerConfig.version\n  );\n\n  const releaseHeader = headerConfig.isDateInTemplate\n    ? replaceVersion.replace(\n        ConfigPlaceholder.date,\n        dayjs().format(config.dateFormat)\n      )\n    : replaceVersion;\n\n  if (config.displayExampleCommit) {\n    displayInfoMessage(`Example commit msg: ${releaseHeader}`);\n  }\n\n  return releaseHeader;\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}